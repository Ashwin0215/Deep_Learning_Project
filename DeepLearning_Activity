!pip install gradio
import gradio as gr
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
from tensorflow import keras
import datetime, os
from google.colab import drive
drive.mount('/content/drive')

batch_size = 32
img_size = (224, 224)


train_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/shoeTypeClassifierDataset/training',
     shuffle=True, batch_size=batch_size, image_size=img_size,
    validation_split=0.2, subset='training', seed=42
)

valid_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/shoeTypeClassifierDataset/validation',
    shuffle=True, batch_size=batch_size, image_size=img_size,
    validation_split=0.2, subset='validation', seed=42
)

test_dataset = tf.keras.preprocessing.image_dataset_from_directory(
    '/content/drive/MyDrive/shoeTypeClassifierDataset/validation',
    shuffle=True, batch_size=batch_size, image_size=img_size
)
class_names = train_dataset.class_names
class_names

plt.figure(figsize=(12, 12))
for images, labels in train_dataset.take(1):
    for i in range(20):
        ax = plt.subplot(4, 5, i + 1)
        plt.imshow(images[i].numpy().astype('uint8'))
        plt.title(train_dataset.class_names[labels[i]])
        plt.axis('off')

base_model = keras.applications.xception.Xception(input_shape=(224, 224, 3),
                                                  weights='imagenet',
                                                  include_top=False)
     


input = keras.layers.Input(shape=(224, 224, 3))


resized_input = keras.layers.Resizing(224, 224)(input)
preprocessed_input = keras.applications.xception.preprocess_input(resized_input)


flip = keras.layers.RandomFlip('horizontal')(preprocessed_input)
rotation = keras.layers.RandomRotation(0.2)(flip)
zoom = keras.layers.RandomZoom(0.2)(rotation)


base_model_output = base_model(zoom)


avg = keras.layers.GlobalAveragePooling2D()(base_model_output)
dropout = keras.layers.Dropout(0.2)(avg)


output = keras.layers.Dense(3, activation='softmax')(dropout)


model = keras.Model(inputs=input, outputs=output)
     

for layer in base_model.layers:
    layer.trainable = False
     

optimizer = keras.optimizers.Adam(learning_rate=0.0001)
model.compile(loss='sparse_categorical_crossentropy', optimizer=optimizer,
              metrics=['accuracy'])
     

history = model.fit(train_dataset, epochs=10, validation_data=valid_dataset)
model.evaluate(test_dataset)
# take a batch of images from the test set and make a prediction
image_batch, label_batch = test_dataset.as_numpy_iterator().next()
predictions = model.predict_on_batch(image_batch)

# apply an argmax since the model
predictions = np.argmax(predictions, axis=-1)

# print predicted and real labels
print('Predictions:\n', predictions)
print('Labels:\n', label_batch)

# plot first 9 images with the predicted classes
plt.figure(figsize=(10, 10))
for i in range(9):
  ax = plt.subplot(3, 3, i + 1)
  plt.imshow(image_batch[i].astype("uint8"))
  plt.title(class_names[predictions[i]])
  plt.axis("off")
def predict_image(img):
  img_4d=img.reshape(-1,224,224,3)
  prediction=model.predict(img_4d)[0]
  return {class_names[i]: float(prediction[i]) for i in range(3)}
image = gr.inputs.Image(shape=(224,224))
label = gr.outputs.Label(num_top_classes=3)
iface = gr.Interface(fn=predict_image, inputs=image, outputs=label,interpretation='default')
iface.launch(debug=True,share=True)
